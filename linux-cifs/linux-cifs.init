#!/bin/sh
# Author: Vitaly Lipatov <lav@etersoft.ru>
# 2006, 2007 Public domain
# Multiplatform init script
# linux-cifs - CIFS support for Linux kernel
#
# chkconfig: 345 03 80
# description:  linux cifs module
#               
# modulename: cifs
#

MODULENAME=cifs

# current module or manually built
DEFMODULEPATH=/lib/modules/linux-cifs/$(uname -r)/$MODULENAME.ko
MANMODULEPATH=/lib/modules/linux-cifs/$MODULENAME.ko
[ -r "$DEFMODULEPATH" ] || DEFMODULEPATH=$MANMODULEPATH

OUTFORMAT=/etc/init.d/outformat
[ -x $OUTFORMAT ] || OUTFORMAT=/etc/init.d/linux-cifs.outformat

if which tput >/dev/null && test -x $OUTFORMAT ; then
	. $OUTFORMAT
else
	MOVE_TO_COL(){ :; }
	SETCOLOR_SUCCESS(){ :; }
	SETCOLOR_FAILURE(){ :; }
	SETCOLOR_WARNING(){ :; }
	SETCOLOR_NORMAL(){ :; }
fi

success()
{
	MOVE_TO_COL
	echo -n '[ '
	SETCOLOR_SUCCESS
	echo -n 'DONE'
	SETCOLOR_NORMAL
	echo -e ' ]\r'
}

failure()
{
	MOVE_TO_COL
	echo -n '['
	SETCOLOR_FAILURE
	echo -n 'FAILED'
	SETCOLOR_NORMAL
	echo -e ']\r'
}

passed()
{
	MOVE_TO_COL
	echo -n '['
	SETCOLOR_WARNING
	echo -n 'PASSED'
	SETCOLOR_NORMAL
	echo -e ']\r'
}

get_pid()
{
	# TODO: use pgrep
	PIDOF=/bin/pidof
	if [ -x $PIDOF ] ; then
		dpid=`$PIDOF $1`
	else
		dpid="$(ps axh | grep $1 | grep -v grep | sed -e 's/ *\(.*\)/\1/' -e 's/ \+/ /g' | grep -v " /bin/sh " | grep -v "^$$ " |  cut -f1 -d\  | head -1)"
	fi
}

is_loaded()
{
    get_pid $1
    test -n "$dpid"
}

is_moduled()
{
    lsmod | grep $MODULENAME > /dev/null
}

load_module()
{
    local i
    if is_moduled ; then
         #test -r /proc/fs/cifs/Etersoft && { passed ; return ; }
         echo -n "Removing CIFS kernel module... "
         rmmod $MODULENAME || { failure ; return ; }
    fi

    # Preload module dependencies
    modprobe nls_base || { echo -n "nls_base is not loaded" ; failure ; } 
    echo -n "Loading CIFS kernel module... "
    if [ -r "$DEFMODULEPATH" ] ; then
	    insmod $DEFMODULEPATH && { echo -n -e "\n\tinsmod $DEFMODULEPATH" ; success ; return ; }
	    echo -n "Incorrect module. Your system: " ; uname -a ; dmesg | tail -n2
    fi
    echo -n "$MODULENAME from Etersoft is not found,\nyou can try compile it with 'service linux-cifs build' command."
    failure
}

start()
{
    load_module
    if is_moduled ; then
        test -r /proc/fs/cifs/Etersoft || { echo -n "Check CIFS for Etersoft extensions... " ; failure ; return ; }
        echo -n "Enable Etersoft extensions for CIFS..."
        echo 1 > /proc/fs/cifs/Etersoft && success || failure
        echo -n "Disable Linux extensions for CIFS..."
        echo 0 > /proc/fs/cifs/LinuxExtensionsEnabled && success || failure
    else
        failure
    fi
}

stop()
{
    echo -n "Unloading CIFS kernel module... "
    is_moduled || { passed ; return ; }
    rmmod $MODULENAME || { failure ; return ; }
    success

}

status()
{
	local PRECOMP
	echo "CIFS module status:"
	if [ "$DEFMODULEPATH" = "$MANMODULEPATH" ] ; then
		PRECOMP="manually built"
	else
		PRECOMP="precompiled"
	fi
	if is_moduled ; then
            echo -e "\tkernel module $MODULENAME is loaded ($PRECOMP)"
            echo -n "Etersoft extensions for CIFS enabled..."
            test `cat /proc/fs/cifs/Etersoft` = "1" && success || failure
            echo -n "Linux extensions for CIFS disabled..."
            test `cat /proc/fs/cifs/LinuxExtensionsEnabled` = "1" && failure || success
        else
            echo -e "\tkernel module $MODULENAME is not loaded ($PRECOMP)"
        fi
}

restart()
{
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    condstop|stop)
        stop
        ;;
    restart)
        restart
        ;;
    build)
        cd /usr/src/linux-cifs
	bash buildmodule.sh
        ;;
    status)
        status
        ;;
    condrestart)
        # remove manual built module
        rm -f $MANMODULEPATH
        if [ "`cat /proc/fs/cifs/Etersoft 2>/dev/null`" = "1" ] ; then
            restart
        else
            echo -n "Etersoft CIFS module..." && passed
        fi
        ;;
    *)
        echo "Usage: linux-cifs {start|stop|restart|condrestart|condstop|status}"
esac

